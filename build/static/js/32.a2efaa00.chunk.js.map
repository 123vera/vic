{"version":3,"sources":["pages/Text/index.js"],"names":["Index","renderer","THREE","canvas","document","querySelector","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","scene","camera","position","z","length","mouseJump","x","y","offset","Spline","this","geometry","color","j","vertices","push","colors","material","vertexColors","mesh","speed","Math","random","add","isMouseDown","prevA","splines","i","onMouseDown","e","preventDefault","onMouseUp","addEventListener","aspect","updateProjectionMatrix","body","requestAnimationFrame","render","a","verticesNeedUpdate","rotation","abs","colorsNeedUpdate","updateColor","max","min","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","react__WEBPACK_IMPORTED_MODULE_5__","Component"],"mappings":"6LAIMA,sMAEE,IAAIC,EAAW,IAAIC,IAAoB,CACnCC,OAAQC,SAASC,cAAc,UAC/BC,WAAW,IAEfL,EAASM,cAAcC,OAAOC,iBAAmB,EAAI,EAAI,GACzDR,EAASS,QAAQF,OAAOG,WAAYH,OAAOI,aAC3C,IAAIC,EAAQ,IAAIX,IACZY,EAAS,IAAIZ,IACb,GACAM,OAAOG,WAAaH,OAAOI,YAC3B,EACA,KAEJE,EAAOC,SAASC,EAAI,GACpB,IAAIC,EAAS,GACTC,EAAY,CACZC,EAAG,EACHC,EAAG,GAEHC,EAAS,EAEb,SAASC,IACLC,KAAKC,SAAW,IAAItB,IACpBqB,KAAKE,MAAQ,OACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,IAAKA,IACrBH,KAAKC,SAASG,SAASC,KACnB,IAAI1B,IAAcwB,EAAI,IAAMT,EAAS,EAAIA,EAAQ,EAAG,IAExDM,KAAKC,SAASK,OAAOH,GAAK,IAAIxB,IAC1B,QAAc,GAAJwB,EAAUH,KAAKE,OAAS,aAG1CF,KAAKO,SAAW,IAAI5B,IAAwB,CACxC6B,aAAc7B,MAElBqB,KAAKS,KAAO,IAAI9B,IAAWqB,KAAKC,SAAUD,KAAKO,UAC/CP,KAAKU,MAAgC,MAAvBC,KAAKC,SAAW,IAC9BtB,EAAMuB,IAAIb,KAAKS,MAGnB,IAAIK,GAAc,EACdC,EAAQ,EA6BZ,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAI,GAAIA,IAAKD,EAAQX,KAAK,IAAIN,GAoB9C,SAASmB,EAAYC,GAGjB,OAFAL,GAAc,EACdK,EAAEC,kBACK,EAGX,SAASC,IACLP,GAAc,EAGlB7B,OAAOqC,iBAAiB,SA5BxB,WACI/B,EAAOgC,OAAStC,OAAOG,WAAaH,OAAOI,YAC3CE,EAAOiC,yBACP9C,EAASS,QAAQF,OAAOG,WAAYH,OAAOI,eA0B/CR,SAAS4C,KAAKH,iBAAiB,YAAaJ,GAC5CrC,SAAS4C,KAAKH,iBAAiB,UAAWD,GAC1CxC,SAAS4C,KAAKH,iBAAiB,aAAcJ,GAC7CrC,SAAS4C,KAAKH,iBAAiB,WAAYD,GAC3CK,sBA9DA,SAASC,EAAOC,GACZF,sBAAsBC,GACtB,IAAK,IAAIV,EAAI,EAAGA,EAAID,EAAQtB,OAAQuB,IAAK,CACrC,IAAK,IAAId,EAAI,EAAGA,EAAIa,EAAQC,GAAGhB,SAASG,SAASV,OAAQS,IACxCa,EAAQC,GAAGhB,SAASG,SAASD,GAI9Ca,EAAQC,GAAGhB,SAAS4B,oBAAqB,EAG7CvC,EAAMwC,SAASlC,EAAQ,KAAJgC,EACfd,GACAnB,EAAUC,GAAK,KACXgC,EAAIb,EAAQ,MAqBxB,WACI,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAQtB,OAAQuB,IAAK,CAErC,IADA,IAAIf,EAAQS,KAAKoB,KAAKf,EAAQC,GAAGf,MAAiB,GAATJ,GAAe,KAC/CK,EAAI,EAAGA,EAAIa,EAAQC,GAAGhB,SAASG,SAASV,OAAQS,IACrDa,EAAQC,GAAGR,KAAKR,SAASK,OAAOH,GAAK,IAAIxB,IACrC,QAAc,GAAJwB,EAAUD,GAAS,aAGrCc,EAAQC,GAAGR,KAAKR,SAAS+B,kBAAmB,GA5BxCC,GACAlB,EAAQa,IAGZjC,EAAUC,GAAK,KAEnBD,EAAUC,EAAIe,KAAKuB,IAAI,EAAGvB,KAAKwB,IAAI,IAAMxC,EAAUC,IACnDE,GAAUH,EAAUC,EACpBlB,EAASiD,OAAOrC,EAAOC,sCA2C3B,OACI6C,EAAAR,EAAAS,cAACC,EAAA,SAAD,KACIF,EAAAR,EAAAS,cAAA,eACAD,EAAAR,EAAAS,cAAA,gCAlHIE,cAwHL9D","file":"static/js/32.a2efaa00.chunk.js","sourcesContent":["import React, {Component, Fragment} from 'react'\nimport * as THREE from 'three';\nimport './index.scss'\n\nclass Index extends Component {\n    componentDidMount() {\n        var renderer = new THREE.WebGLRenderer({\n            canvas: document.querySelector(\"canvas\"),\n            antialias: true\n        });\n        renderer.setPixelRatio(window.devicePixelRatio > 1 ? 2 : 1);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera(\n            45,\n            window.innerWidth / window.innerHeight,\n            1,\n            1000\n        );\n        camera.position.z = 60;\n        var length = 30;\n        var mouseJump = {\n            x: 0,\n            y: 0\n        };\n        var offset = 0;\n\n        function Spline() {\n            this.geometry = new THREE.Geometry();\n            this.color = '#fff';\n            for (var j = 0; j < 180; j++) {\n                this.geometry.vertices.push(\n                    new THREE.Vector3(j / 180 * length * 2 - length, 0, 0)\n                );\n                this.geometry.colors[j] = new THREE.Color(\n                    \"hsl(\" + (j * 0.6 + this.color) + \",10%,50%)\"\n                );\n            }\n            this.material = new THREE.LineBasicMaterial({\n                vertexColors: THREE.VertexColors\n            });\n            this.mesh = new THREE.Line(this.geometry, this.material);\n            this.speed = (Math.random() + 0.1) * 0.0002;\n            scene.add(this.mesh);\n        }\n\n        var isMouseDown = false;\n        var prevA = 0;\n\n        function render(a) {\n            requestAnimationFrame(render);\n            for (var i = 0; i < splines.length; i++) {\n                for (var j = 0; j < splines[i].geometry.vertices.length; j++) {\n                    var vector = splines[i].geometry.vertices[j];\n                    // vector.y = noise.simplex2(j * 0.01 + i - offset, a * splines[i].speed) * 4;\n                    // vector.z = noise.simplex2(vector.x * 0.01 + i, a * splines[i].speed) * 10;\n                }\n                splines[i].geometry.verticesNeedUpdate = true;\n            }\n\n            scene.rotation.x = a * 0.0003;\n            if (isMouseDown) {\n                mouseJump.x += 0.001;\n                if (a - prevA > 100) {\n                    updateColor();\n                    prevA = a;\n                }\n            } else {\n                mouseJump.x -= 0.001;\n            }\n            mouseJump.x = Math.max(0, Math.min(0.07, mouseJump.x));\n            offset += mouseJump.x;\n            renderer.render(scene, camera);\n        }\n\n        var splines = [];\n        for (var i = 0; i < 30; i++) splines.push(new Spline());\n\n        function onResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        }\n\n        function updateColor() {\n            for (var i = 0; i < splines.length; i++) {\n                var color = Math.abs((splines[i].color - offset * 10) % 360);\n                for (var j = 0; j < splines[i].geometry.vertices.length; j++) {\n                    splines[i].mesh.geometry.colors[j] = new THREE.Color(\n                        \"hsl(\" + (j * 0.6 + color) + \",70%,70%)\"\n                    );\n                }\n                splines[i].mesh.geometry.colorsNeedUpdate = true;\n            }\n        }\n\n        function onMouseDown(e) {\n            isMouseDown = true;\n            e.preventDefault();\n            return false;\n        }\n\n        function onMouseUp() {\n            isMouseDown = false;\n        }\n\n        window.addEventListener(\"resize\", onResize);\n        document.body.addEventListener(\"mousedown\", onMouseDown);\n        document.body.addEventListener(\"mouseup\", onMouseUp);\n        document.body.addEventListener(\"touchstart\", onMouseDown);\n        document.body.addEventListener(\"touchend\", onMouseUp);\n        requestAnimationFrame(render);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <canvas></canvas>\n                <h2>Press down</h2>\n            </Fragment>\n        )\n    }\n}\n\nexport default Index"],"sourceRoot":""}